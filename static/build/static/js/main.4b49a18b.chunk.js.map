{"version":3,"sources":["logo.svg","WebCam.js","FlashCards.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","WebCam","props","detectFromVideoFrame","model","video","detect","then","predictions","showDetections","requestAnimationFrame","error","console","log","ctx","canvasRef","current","getContext","clearRect","canvas","width","height","font","textBaseline","forEach","prediction","x","bbox","y","push","class","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","textHeight","parseInt","fillRect","fillText","score","toFixed","state","isloaded","checkClick","bind","videoRef","createRef","styles","position","marginLeft","marginRight","left","right","this","p","navigator","mediaDevices","getUserMedia","webkitGetUserMedia","webcamPromise","audio","stream","window","srcObject","Promise","resolve","onloadedmetadata","loadlModelPromise","cocoSsd","all","values","catch","screen","className","facingMode","style","autoPlay","muted","ref","onClick","e","pageX","offsetLeft","pageY","offsetTop","word","Component","FlashCards","flashcard","currentWordIndex","words","pos","def","Grid","container","spacing","item","xs","id","setState","document","getElementById","transform","top","Icon","iconName","Main","isFlashCards","default","isScan","background","updateState","body","getElementsByTagName","animation","Button","variant","color","SimpleBottomNavigation","useStyles","makeStyles","root","classes","sets","0","1","2","BottomNavigation","onChange","event","newValue","showLabels","BottomNavigationAction","label","icon","App","Boolean","location","hostname","match","ReactDOM","render","initializeIcons","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4b49a18b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component, createRef } from 'react'\r\nimport * as cocoSsd from '@tensorflow-models/coco-ssd';\r\n\r\n/*\r\nexport default class WebCam extends Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.update = this.update.bind(this);\r\n    }\r\n    componentDidMount()\r\n    {\r\n        //video dimensions\r\n        const constraints = {\r\n            video: {width: {exact: 900}, height: {exact: 700}}\r\n        };\r\n\r\n        \r\n        const video = document.getElementById(\"webcam-dom\");\r\n        \r\n        navigator.mediaDevices.getUserMedia(constraints).\r\n        then((stream) => {\r\n            video.srcObject = stream;\r\n        });\r\n    }\r\n\r\n    update(){\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className = \"webcam\" onClick = {(e) => {\r\n                console.log(e);\r\n                console.log(e.pageX);\r\n                console.log(e.pageY);\r\n            }}>\r\n                <video id = \"webcam-dom\" autoPlay></video>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n*/\r\n\r\nexport default class WebCam extends Component {\r\n\r\n    constructor(props){\r\n      super(props);\r\n\r\n      this.predictions = [];\r\n      this.state = {\r\n        isloaded: false\r\n      }\r\n\r\n      this.checkClick = this.checkClick.bind(this);\r\n\r\n      \r\n          // reference to both the video and canvas\r\n    this.videoRef = createRef();\r\n    this.canvasRef = createRef();\r\n\r\n    \r\n    // we are gonna use inline style\r\n    this.styles = {\r\n      position: 'fixed',\r\n      marginLeft: \"auto\",\r\n      marginRight: \"auto\",\r\n      left: 0,\r\n      right: 0\r\n    };\r\n     }\r\n  \r\n  \r\n    detectFromVideoFrame = (model, video) => {\r\n      model.detect(video).then(predictions => {\r\n        this.showDetections(predictions);\r\n  \r\n        requestAnimationFrame(() => {\r\n          this.detectFromVideoFrame(model, video);\r\n        });\r\n      }, (error) => {\r\n        console.log(\"Couldn't start the webcam\")\r\n        console.error(error)\r\n      });\r\n    };\r\n\r\n    checkClick(x, y){\r\n      console.log(this.predictions);\r\n      this.predictions.forEach((p) => {\r\n        if( (x > p[0])&&(x < (p[0] + p[2]) )&&(y > p[1])&&(y < (p[1] + p[3]) ) ){\r\n          return p[4];\r\n        }\r\n        else{\r\n          return null\r\n        }\r\n      })\r\n    }\r\n  \r\n    showDetections = predictions => {\r\n      const ctx = this.canvasRef.current.getContext(\"2d\");\r\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n      const font = \"24px helvetica\";\r\n      ctx.font = font;\r\n      ctx.textBaseline = \"top\";\r\n      \r\n      this.predictions = [];\r\n      predictions.forEach(prediction => {\r\n      \r\n        \r\n        const x = prediction.bbox[0];\r\n        const y = prediction.bbox[1];\r\n        const width = prediction.bbox[2];\r\n        const height = prediction.bbox[3];\r\n\r\n        this.predictions.push([x, y, width, height, prediction.class]);\r\n\r\n        // Draw the bounding box.\r\n        ctx.strokeStyle = \"#2fff00\";\r\n        ctx.lineWidth = 1;\r\n        ctx.strokeRect(x, y, width, height);\r\n        // Draw the label background.\r\n        ctx.fillStyle = \"#2fff00\";\r\n        const textWidth = ctx.measureText(prediction.class).width;\r\n        const textHeight = parseInt(font, 10);\r\n        // draw top left rectangle\r\n        ctx.fillRect(x, y, textWidth + 10, textHeight + 10);\r\n        // draw bottom left rectangle\r\n        ctx.fillRect(x, y + height - textHeight, textWidth + 15, textHeight + 10);\r\n  \r\n        // Draw the text last to ensure it's on top.\r\n        ctx.fillStyle = \"#000000\";\r\n        ctx.fillText(prediction.class, x, y);\r\n        ctx.fillText(prediction.score.toFixed(2), x, y + height - textHeight);\r\n      });\r\n    };\r\n  \r\n    \r\n    componentDidMount() {\r\n      if (navigator.mediaDevices.getUserMedia || navigator.mediaDevices.webkitGetUserMedia) {\r\n        // define a Promise that'll be used to load the webcam and read its frames\r\n        const webcamPromise = navigator.mediaDevices\r\n          .getUserMedia({\r\n            video: true,\r\n            audio: false,\r\n          })\r\n          .then(stream => {\r\n            // pass the current frame to the window.stream\r\n            window.stream = stream;\r\n            // pass the stream to the videoRef\r\n            this.videoRef.current.srcObject = stream;\r\n            \r\n            return new Promise(resolve => {\r\n              this.videoRef.current.onloadedmetadata = () => {\r\n                resolve();\r\n              };\r\n            });\r\n          }, (error) => {\r\n            console.log(\"Couldn't start the webcam\")\r\n            console.error(error)\r\n          });\r\n\r\n        // define a Promise that'll be used to load the model\r\n        const loadlModelPromise = cocoSsd.load();\r\n        \r\n        // resolve all the Promises\r\n        Promise.all([loadlModelPromise, webcamPromise])\r\n          .then(values => {\r\n            this.detectFromVideoFrame(values[0], this.videoRef.current);\r\n          })\r\n          .catch(error => {\r\n            console.error(error);\r\n          });\r\n      }\r\n    }\r\n\r\n  \r\n    // here we are returning the video frame and canvas to draw,\r\n    // so we are in someway drawing our video \"on the go\"\r\n    render() {\r\n\r\n        var vidwidth = window.screen.width;\r\n        var vidheight = window.screen.height;\r\n      return (\r\n        <div className = \"webcam\"> \r\n          <video\r\n            facingMode=\"environment\"\r\n            style={this.styles}\r\n            autoPlay\r\n            muted\r\n            ref={this.videoRef}\r\n            width=\"800\"\r\n            height=\"600\"\r\n          />\r\n          <canvas style={this.styles} ref={this.canvasRef} width=\"800\" height=\"600\" onClick = {(e) => {\r\n                \r\n                var x = (e.pageX - this.canvasRef.current.offsetLeft);\r\n                var y = (e.pageY - this.canvasRef.current.offsetTop);\r\n\r\n                var word = this.checkClick(x, y);\r\n                if (word === null){\r\n\r\n                } else {\r\n                  console.log(word);\r\n                }\r\n            }}/>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n\r\n  class WordList extends Component{\r\n    constructor(prop){\r\n\r\n    }\r\n\r\n    render(){\r\n      return (\r\n        <div>\r\n\r\n        </div>\r\n      )\r\n    }\r\n  }","import React, { Component } from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { Icon } from 'office-ui-fabric-react/lib/Icon';\r\n\r\nexport default class FlashCards extends Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n\r\n        this.state = {\r\n            flashcard: true,\r\n            currentWordIndex: 0, \r\n            words: [\r\n                {\r\n                    word: \"Apple\",\r\n                    pos: \"noun\",\r\n                    def: \"the round fruit of a tree of the rose family, which typically has thin red or green skin and crisp flesh. Many varieties have been developed as dessert or cooking fruit or for making cider.\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    render() {\r\n\r\n        return (\r\n            <div className = \"flashcards\">\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <div className = \"maincontainer\">\r\n                            <div className = \"flashcard\" id = \"flashcard-word\" onClick = {() => {\r\n                                this.setState({\r\n                                    flashcard: !this.state.flashcard\r\n                                }, () => {\r\n                                    var flashcard = document.getElementById(\"flashcard-word\");\r\n                                    (!this.state.flashcard) ? flashcard.style.transform = \"rotateY(180deg)\" : flashcard.style.transform = \"rotateY(0)\";\r\n                                })\r\n                            }}>\r\n                                <div class=\"thefront\">\r\n                                    <div>\r\n                                        {\"Cat\"}\r\n                                    </div>\r\n                                    <div className = \"partofspeech\">\r\n                                        {\"Noun\"}\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"theback\">{\"El Gato\"}</div>\r\n                                \r\n                            </div>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <div style = {{\r\n                            position: \"absolute\",\r\n                            top: \"50%\"\r\n                        }}>\r\n                            <div className = \"for-back\">\r\n                                <Icon iconName = \"Back\"/>\r\n                            </div>\r\n                            <div className = \"for-back\">\r\n                                <Icon iconName = \"Forward\"/>\r\n                            </div>\r\n                        </div>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={6}>\r\n                        <div className = \"wordlist\">\r\n                            helloasdasd\r\n                            asd\r\n                            asd\r\n                            as\r\n                            das\r\n                            dsss\r\n                        </div>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={6}>\r\n                        <div className = \"word-definition\">\r\n                            <div className = \"word-def-title\">Definition</div>\r\n                            <div className = \"word-def-text\">The cat is a small carnivorous mammal. It is the only domesticated species in the family Felidae and often referred to as the domestic cat to distinguish it from wild members of the family. The cat is either a house cat or a farm cat, which are pets, or a feral cat, which ranges freely and avoids human contact.</div>\r\n                        </div>\r\n                    </Grid>\r\n                    \r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport WebCam from \"./WebCam.js\";\r\nimport FlashCards from \"./FlashCards.js\";\r\n\r\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\r\nimport EmojiObjectsIcon from '@material-ui/icons/EmojiObjects';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\n\r\n\r\nexport default class Main extends Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            isFlashCards: false,\r\n            default: true,\r\n            isScan: false\r\n        }\r\n\r\n        this.background = this.background.bind(this);\r\n        this.background(this.state);\r\n\r\n        this.updateState = this.updateState.bind(this);\r\n    }\r\n\r\n    updateState(state){\r\n        console.log(state);\r\n        this.setState(state);\r\n    }\r\n\r\n    background(state){\r\n        console.log(\"state\", state);\r\n        var body = document.getElementsByTagName(\"BODY\")[0];\r\n        console.log(body.style);\r\n        body.style.animation = \"gradientFlow 5s infinite linear\";\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className = \"Main\">\r\n                <div className = \"Main-container\">\r\n                    <div className = \"Main-content\">\r\n                        {this.state.isFlashCards && (<FlashCards/>)}\r\n                        {this.state.isScan && (<WebCam/>)}\r\n                        {\r\n                            this.state.default && \r\n\r\n                        (\r\n                            <div className = \"main-buttons\">\r\n                                <div className = \"main-title\">If its not you then its hella bs</div>\r\n                                <div className = \"main-content-button\">\r\n                                    <Button variant=\"contained\" color = \"primary\" onClick = {() => {\r\n        \r\n                                    this.setState({\r\n                                        isScan: true,\r\n                                        default: false\r\n                                    }, () => {\r\n                                        this.background(this.state);\r\n                                    })\r\n                                }}>\r\n                                        Scan\r\n                                    </Button>\r\n                                </div>\r\n                                <div className = \"main-content-button\">\r\n                                    <Button variant=\"contained\" color = \"secondary\" onClick = {() => {\r\n                                        this.setState({\r\n                                            default: false,\r\n                                            isScan: false,\r\n                                            isFlashCards: true\r\n                                        })\r\n                                    }}>\r\n                                        Practice\r\n                                    </Button>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className = \"navbar\">\r\n                    <SimpleBottomNavigation setState = {this.updateState}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n      width: \"100%\",\r\n    },\r\n  });\r\n\r\nfunction SimpleBottomNavigation(props) {\r\n    const classes = useStyles();\r\n  \r\n    var sets = {\r\n        0 : {   isFlashCards: false,\r\n                default: false,\r\n                isScan: true\r\n            },\r\n        1 : {   isFlashCards: false,\r\n            default: true,\r\n            isScan: false\r\n        },\r\n        2:  {   isFlashCards: true,\r\n            default: false,\r\n            isScan: false\r\n        } \r\n    }\r\n    return (\r\n      <BottomNavigation\r\n        onChange={(event, newValue) => {\r\n            props.setState(sets[newValue]);\r\n        }}\r\n        showLabels\r\n        className={classes.root}\r\n      >\r\n        <BottomNavigationAction label=\"Scan\"  icon = {<AddAPhotoIcon/>}/>\r\n        <BottomNavigationAction label=\"Home\"  icon = {<HomeIcon/>}/>\r\n        <BottomNavigationAction label=\"Practice\"  icon = {<EmojiObjectsIcon/>}/>\r\n      </BottomNavigation>\r\n    );\r\n  }","import React from 'react';\nimport logo from './logo.svg';\nimport Main from './Main.js';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { initializeIcons } from '@uifabric/icons';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\ninitializeIcons();\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}